1. Intro
    1.1 Motivacion
        Monte Carlo, simulaciones con geometria compleja.

        Costo computacional.

        Reduccion de varianza. Aumentar la contribucion del tally.

        KDS -> KDE -> Estimaciones continuas de las distribuciones del espacio de fase. Problemas para seguir cambios
        discretos.

        OTF para reducir el uso intersivo de RAM.

        Separar la simulacion en distintas partes para evitar que haya mucha diferencia en el orden de magnitud
        de los flujos.

    1.2 Objetivos
        Contribuir al proyecto/herramienta KDSource para agregar un metodo a traves de histogramas multidimensionales.
        Se busca contruir al defecto que posee la herramienta basada en KDE para seguir cambios discretos como en 
        interfaces de materiales.

        Se busca implementar una version para generar listas de particulas offline y otro metodo para generar OTF 
        para esquivar las limitaciones relacionadas a trabajar con listas de memorias muy demandantes en 
        terminos de RAM.

2. Herramientas utilizadas
    Vision completa de las herramientas utilizadas. KDSource, OpenMC, C, C++, Python, XML, MCPL.
    
    Descripcion del flujo de trabajo aplicado a alguna problematica a resolver.

    2.1 Conceptos fundamentales en desarrollo orientado a objetos (tal vez solo explicar OpenMC)
        OpenMC esta escrito en lenguaje C++. Tienen lo siguientes conceptos: Clases, Metodos, Herencia, Clase 
        virtual, Constructor, Instancia, Destructor. Cuenta con una API de Python para favorecer el uso.

        Origen de OpenMC (MIT). Proyecto OpenSource. Corrida multithread.

        Esquema de flujo de trabajo de OpenMC. 

        Explicar como se genera una lista de particulas dentro de la simulacion.

        Explicar los tipos de fuente. Source (base), Independent Source, Compiled Source, File Source, 
        KernelDensitySource, Histogram Source.

    2.2 KDSource
        Herramienta de codigo libre para actuar como metodo de reduccion de varianza aplicada a simulaciones del
        tipo MonteCarlo. Principalmente para calculo de haces de irradiacion y blindaje.

        Se basa en el metodo KDE para estimar la distribucion en el espacio de fases de una lista de particulas 
        registrada en una superficie que va a actuar como interface entre las distintas etapas de una
        simulacion MC que cuenta con una geometria compleja que se divide en subpartes.

        KDSource esta escrito en C y Python. Explicar las diferencias respecto a C++.

        Luego se utiliza KDSource para generar nuevas particulas que idealmente pertenecen al espacio de fases
        original registrado. Estas serviran de fuente para la siguiente etapa de la simulacion.

        2.2.1 KDE
            No se si hace falta explicar KDE porque no es algo que yo utilice.
        
        2.2.2 Implementacion del metodo KDE en KDSource
            Idem anterior.

        2.2.3 Estructura implementada en KDSource
            Idem anterior.

    2.3 Histogramas multidimensionales
        Anexo al programa KDSource basandose en histogramas multidimensionales anidados para estimar la distribucion
        del espacio de fases. Funciona como metodo alternativo al basado en KDE. Basado en Python y C para respetar
        la estructura implementada previamente en KDSource.

        Estrucutura basada en macro grupos y micro grupos. 

        2.3.1 Histogramas macro
            Obtener una aproximacion de la correlacion entre las dimensiones de las particulas. Poder separar 
            particulas en subgrupos buscando que compartan caracteristicas.

        2.3.2 Histogramas micro
            Obtener una aproximacion de la distribucion de cada macrogrupo. Se realiza una funcion de frecuencia 
            acumulada normalizada para poder samplear la variable de una particula y obtener el macrogrupo 
            correspondiente de la siguiente variable.

        2.3.3 Sampleo
            Explicar el sampleo.

    2.4 Flujo de trabajo empleado para conectar las distintas etapas de la simulacion MC completa
        Explicar que se corre una primera simulacion y se registra las propiedades de las particulas que atraviesan 
        una superficie intermedia que actua como interface. 
        
        Se utiliza el metodo implementado en KDSource mediante HMD para poder generar una fuente de OpenMC 
        que permita generar particulas nuevas a partir de la superficie intermedia.

        Se utiliza el formato MCPL que permite actuar de interface entre los distintos formatos de particulas que
        se pueden registrar en los distintos programas MC (OpenMc, MCNP, McStas, Tripoli). Permite acoplar
        simulaciones entre distintos codigos.

        A partir de la lista de particulas original se le aplica el metodo de HMD y se obtiene un archivo XML
        que posee la informacion requerida para generar nuevas particulas. Luego OpenMC puede leer este archivo XML
        y generar nuevas particulas una por una. O sino se puede leer el XML y generar una lista completa de particulas
        y guardarlas en disco.

    2.5 Simulacion OTF
        Sin implementar una simulacion OTF sucede que al momento de querer correr la segunda simulacion se tiene
        que cargar en RAM la lista sintetica generada. Esto entonces establece una limitacion relacionada a la
        memoria RAM disponible en el ordenador donde se ejecute la simulacion. En el presente trabajo se trabajo con
        un ordenador de 36GB de RAM, donde se pudo trabajar con el orden de 2e7 particulas.
        
        Al implementar el metodo OTF se puede correr particulas de forma indefinida, obteniendose asi corridas
        de mayor tama√±o que permite obtener mejores resultados.

    2.6 MCPL y HDF5

    2.7 XML
        libxml2, pugi xml, y el de python.

3. Desarrollo
    Presentar el desarrollo de la tecnica de muestreo OTF mediante histogramas multidimensionales dentro de OpenMC
    utilizando el complemento KDSource. Presentar la implementacion en C++ y Python del neuvo tipo de fuente 
    HistogramSource.

    3.1  Introduccion
        Explicar como desde una lista de particulas se utiliza la herramienta KDSource para generar el XML.

        Luego explicar como se conecta el XML a la implementacion de OpenMC. Explicar la clase de Source y como
        se debe completar para poder generar un tipo de fuente a partir de la clase base. Esto va a llevar a explicar
        los metodos de la clase, como por ejemplo el metodo de sample.

    3.1 bis Problemas encontrados
        Ruido estadistico. Deteccion de cambios. etc etc

    3.2 Implementacion de la clase HistogramSource
        blablabla

        3.2.1 Implementacion del metodo de Sampleo
            Blablabla

    3.3 Paralelizacion
        No se si hara falta.

4. Verificacion del metodo implementado.
    
    4.1 Prueba de sampleo
        Mostrar como se analiza por KL la distancia entre la lista original y la sintetica

    4.2 Prueba en tubo de agua sin vacio
        Analizar la corriente que llega a una superficie.

    4.3 Prueba de tubo de agua con vacio
        blablabla. ver si poner el flujo en ambos casos.

5. Conducto N5 del reactor RA6. Espectro a traves de tecnica de tiempo de vuelo.
    Explicar el RA6.

    5.1 Descripcion del conducto N5. 

    5.2 Descripcion de la tecnica de tiempo de vuelo

    5.3 Explicacion del flujo de trabajo. Neutrones y Gamma.

POR ALGUN LADO METER LO DEL FACTOR DE NORMALIZACION Y TODO ESO. TAMBIEN EXPLICAR PORQUE NOS QUEDAMOS CON LAS PARTICULAS
QUE VAN PARA ADELANTE Y PORQUE SE PUEDE DESPRECIAR LAS QUE VAN PARA ATRAS QUE PODRIAN REBOTAR Y REINGRESAR.

    5.4 Resultados obtenidos.

6. Conclusiones
    blablabla

    6.1 Trabajo futuro

Apendice A Implementacion de la clase HistogramSource en OpenMC
    todo el codigo.

Apendice B Implementacion en KDSource
    idem.

Bibliografia
    Gimeno, Fairhurts, OpenMC doc, KDSource doc, Ayala, Abbate, Fox, 

   

















